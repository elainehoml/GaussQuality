[{"fullname": "gaussquality", "modulename": "gaussquality", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "gaussquality.gaussquality_2D", "modulename": "gaussquality.gaussquality_2D", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "gaussquality.gaussquality_2D.main", "modulename": "gaussquality.gaussquality_2D", "qualname": "main", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_2D_cli", "modulename": "gaussquality.gaussquality_2D_cli", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "gaussquality.gaussquality_2D_cli.gaussquality_parser", "modulename": "gaussquality.gaussquality_2D_cli", "qualname": "gaussquality_parser", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_3D", "modulename": "gaussquality.gaussquality_3D", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "gaussquality.gaussquality_3D.main", "modulename": "gaussquality.gaussquality_3D", "qualname": "main", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_3D_cli", "modulename": "gaussquality.gaussquality_3D_cli", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "gaussquality.gaussquality_3D_cli.gaussquality3D_parser", "modulename": "gaussquality.gaussquality_3D_cli", "qualname": "gaussquality3D_parser", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_calc", "modulename": "gaussquality.gaussquality_calc", "qualname": "", "type": "module", "doc": "<p>Calculates SNR and CNR from grey value means and stdevs</p>\n\n<p>Created on Mon Jan 25 15:50:29 2021</p>\n\n<p>@author: elainehoml</p>\n"}, {"fullname": "gaussquality.gaussquality_calc.calc_snr", "modulename": "gaussquality.gaussquality_calc", "qualname": "calc_snr", "type": "function", "doc": "<p>Calculate signal-to-noise ratio based on mean <code>mu</code> and standard deviation\n<code>sigma</code> of a grey value distribution for a material in the image.</p>\n\n<p>SNR = $\frac{mu_{feature}}{sigma_{background}}$</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mu</strong> (float):\nMean grey value for material which is our feature of interest.</li>\n<li><strong>sigma</strong> (float):\nStandard deviation of grey values for material representing background.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: SNR.</li>\n</ul>\n", "parameters": ["mu", "sigma"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_calc.calc_cnr", "modulename": "gaussquality.gaussquality_calc", "qualname": "calc_cnr", "type": "function", "doc": "<p>Calculate contrast-to-noise ratio based on mean <code>mu_a</code> of feature and\n<code>mu_b</code> background material and standard deviation <code>sigma_b</code> of the\nbackground.</p>\n\n<p>CNR = $\frac{\\mu_{feature} - \\mu_{background}}{\\sigma_{background}}$</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mu_a</strong> (float):\nMean grey value for material which is our feature of interest.</li>\n<li><strong>mu_b</strong> (float):\nMean grey value for material which is our background material.</li>\n<li><strong>sigma_b</strong> (float):\nStandard deviation of grey values for material representing background.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: CNR.</li>\n</ul>\n", "parameters": ["mu_a", "mu_b", "sigma_b"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_calc.calc_snr_stack", "modulename": "gaussquality.gaussquality_calc", "qualname": "calc_snr_stack", "type": "function", "doc": "<p>Calculate SNR for each 2-D image with Gaussian Mixture Model fitted\nfrom a 3-D image sequence</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iter_results</strong> (list):\nList of fitted <code>mu</code>, <code>sigma</code> and <code>phi</code> Gaussian properties.</li>\n<li><strong>background_number</strong> (int):\nMaterial number of background material. Materials are numbered in\nascending order of <code>mu</code>.</li>\n<li><strong>feature_number</strong> (int):\nMaterial number of feature material. Materials are numbered in\nascending order of <code>mu</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>snrs</strong> (dict):\nDict of SNRs. Keys = slice number, values = SNR.</li>\n</ul>\n", "parameters": ["iter_results", "background_number", "feature_number"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_calc.calc_cnr_stack", "modulename": "gaussquality.gaussquality_calc", "qualname": "calc_cnr_stack", "type": "function", "doc": "<p>Calculate CNR for each 2-D image with Gaussian Mixture Model fitted\nfrom a 3-D image sequence</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iter_results</strong> (list):\nList of fitted <code>mu</code>, <code>sigma</code> and <code>phi</code> Gaussian properties.</li>\n<li><strong>background_number</strong> (int):\nMaterial number of background material. Materials are numbered in\nascending order of <code>mu</code>.</li>\n<li><strong>feature_number</strong> (int):\nMaterial number of feature material. Materials are numbered in\nascending order of <code>mu</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>cnr</strong> (dict):\nDict of CNRs. Keys = slice number, values = CNR.</li>\n</ul>\n", "parameters": ["iter_results", "background_number", "feature_number"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_fitting", "modulename": "gaussquality.gaussquality_fitting", "qualname": "", "type": "module", "doc": "<p>Gaussian mixture model fitting for greyscale images: Fitting</p>\n\n<p>Created on Mon Jan 25 15:36:11 2021</p>\n\n<p>@author: elainehoml</p>\n"}, {"fullname": "gaussquality.gaussquality_fitting.fit_GMM", "modulename": "gaussquality.gaussquality_fitting", "qualname": "fit_GMM", "type": "function", "doc": "<p>Fits Gaussian mixture model to <code>img</code> grey values, and return fitted\nGaussian properties.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (array-like):\n2-D array containing image grey values.</li>\n<li><strong>n_components</strong> (int):\nNumber of Gaussian components to fit to grey value distribution.\nUsually <code>n_components</code> = number of materials in the specimen image.</li>\n<li><strong>mu_init</strong> (list, optional):\nList of initial mean values to use. The default is None.</li>\n<li><strong>threshold</strong> (tuple, optional):\n(Min, Max) grey value to consider. The default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mu_fitted</strong> (array-like, len=n_components):\nFitted mean of Gaussian components.</li>\n<li><strong>sigma_fitted</strong> (array-like, len=n_components):\nFitted standard deviation of Gaussian components.</li>\n<li><strong>phi_fitted</strong> (array-like, len=n_components):\nFitted weights of Gaussian components.</li>\n</ul>\n", "parameters": ["img", "n_components", "mu_init", "threshold"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_fitting.run_GMM_fit", "modulename": "gaussquality.gaussquality_fitting", "qualname": "run_GMM_fit", "type": "function", "doc": "<p>Fit Gaussian mixture models to 2-D images in a 3-D image sequence.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img_dir</strong> (str, path-like):\nDirectory to image.</li>\n<li><strong>n_components</strong> (int):\nNumber of Gaussian components to fit to grey value distribution.\nUsually <code>n_components</code> = number of materials in the specimen image.</li>\n<li><strong>z_percentage</strong> (float, optional):\nPercentage of stack to consider in the z-direction\nImages will be taken evenly over this <code>z_percentage</code> centred in the\ncentral slice. Spacing between images is\n<code>z_percentage</code>/100 * <code>number_of_slices</code> / <code>n_runs</code>. The default is 70.</li>\n<li><strong>n_runs</strong> (int, optional):\nNumber of images to consider from the 3-D sequence. The default is 30.</li>\n<li><strong>mask_percentage</strong> (float):\nPercentage of the image to consider, as a rectangle centred on <code>img</code>.\nRanges from 0-100.</li>\n<li><strong>threshold</strong> (tuple, optional):\n(Min, Max) grey value to consider. The default is None.</li>\n<li><strong>mu_init</strong> (list, optional):\nList of initial mean values to use. The default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>fitted_results</strong> (list):\nList containing fitted Gaussian properties <code>mu</code>, <code>sigma</code> and <code>phi</code>\naveraged across the stack.</li>\n<li><strong>iter_results</strong> (list):\nList containing dicts of fitted Gaussian properties for each 2-D image\nconsidered.</li>\n</ul>\n", "parameters": ["img_dir", "n_components", "z_percentage", "n_runs", "mask_percentage", "threshold", "mu_init"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_io", "modulename": "gaussquality.gaussquality_io", "qualname": "", "type": "module", "doc": "<p>Gaussian mixture model fitting for greyscale images: IO</p>\n\n<p>Created on Mon Jan 25 14:50:04 2021</p>\n\n<p>@author: elainehoml</p>\n"}, {"fullname": "gaussquality.gaussquality_io.get_img_list", "modulename": "gaussquality.gaussquality_io", "qualname": "get_img_list", "type": "function", "doc": "<p>Gets list of .tiff images in an image sequence folder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img_dir</strong> (str, path-like):\nPath to folder containing single images.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: List of image filenames in the folder in ascending order. Only works on .tiff images.</li>\n</ul>\n", "parameters": ["img_dir"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_io.get_img_filepath", "modulename": "gaussquality.gaussquality_io", "qualname": "get_img_filepath", "type": "function", "doc": "<p>Gets filepath for a specific image in a sequence.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img_dir</strong> (str, path-like):\nPath to folder containing single images.</li>\n<li><strong>index</strong> (int):\nIndex of image</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str, path-like</strong>: Image filepath for index image in sequence</li>\n</ul>\n", "parameters": ["img_dir", "index"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_io.get_nslices", "modulename": "gaussquality.gaussquality_io", "qualname": "get_nslices", "type": "function", "doc": "<p>Gets number of slices in an image sequence folder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img_dir</strong> (str, path-like):\nPath to folder containing single images.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: Number of images in the sequence. Must ensure that no other files\nexist in the folder besides the images.</li>\n</ul>\n", "parameters": ["img_dir"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_io.mask_img", "modulename": "gaussquality.gaussquality_io", "qualname": "mask_img", "type": "function", "doc": "<p>Applies a mask in x-y plane to only consider the central <code>mask-percentage</code>\npercentage of the image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (array-like):\n2-D array containing image grey values.</li>\n<li><strong>mask_percentage</strong> (float):\nPercentage of the image to consider, as a rectangle centred on <code>img</code>.\nRanges from 0-100.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>masked_img</strong> (array-like):\nCentral <code>mask-percentage</code> of the 2D image <code>img</code></li>\n</ul>\n", "parameters": ["img", "mask_percentage"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_io.load_img", "modulename": "gaussquality.gaussquality_io", "qualname": "load_img", "type": "function", "doc": "<p>Loads image from <code>img_filepath</code> and applies a mask with percentage\n<code>mask_percentage</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img_filepath</strong> (str, path-like):\nFilepath to the image to import.</li>\n<li><strong>show_image</strong> (bool, optional):\nIf True, display the image. The default is False.</li>\n<li><strong>mask_percentage</strong> (float, optional):\nPercentage of the image to import, as a rectangle centred in the x-y\nplane. The default is 100.</li>\n<li><strong>v_min</strong> (float, optional, default None):\nMinimum grey value to plot</li>\n<li><strong>v_max</strong> (float, optional, default None):\nMaximum grey value to plot</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>img</strong> (array-like):\n2-D array representing masked image.</li>\n</ul>\n", "parameters": ["img_filepath", "show_image", "mask_percentage", "vmin", "vmax"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_io.save_GMM_single_results", "modulename": "gaussquality.gaussquality_io", "qualname": "save_GMM_single_results", "type": "function", "doc": "<p>Saves average fitted Gaussian properties across the stack.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitted_results</strong> (list):\nList containing fitted Gaussian properties <code>mu</code>, <code>sigma</code> and <code>phi</code>\naveraged across the stack.</li>\n<li><strong>save_dir</strong> (str, path-like):\nDirectory to savepath.</li>\n<li><strong>prefix</strong> (str):\nPrefix to filename</li>\n<li><strong>SNR</strong> (dict, optional.):\nSNR. Default is None.</li>\n<li><strong>CNR</strong> (dict, optional.):\nCNR. Default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "parameters": ["fitted_results", "save_dir", "prefix", "SNR", "CNR"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_io.save_GMM_slice_results", "modulename": "gaussquality.gaussquality_io", "qualname": "save_GMM_slice_results", "type": "function", "doc": "<p>Saves fitted Gaussian properties for each individual 2-D image considered\nfrom a 3-D image sequence</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iter_results</strong> (list):\nList of fitted <code>mu</code>, <code>sigma</code> and <code>phi</code> Gaussian properties.</li>\n<li><strong>save_dir</strong> (str, path-like):\nDirectory to save results.</li>\n<li><strong>prefix</strong> (str):\nPrefix to save results filename.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "parameters": ["iter_results", "save_dir", "prefix"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_io.save_SNR_CNR_stack", "modulename": "gaussquality.gaussquality_io", "qualname": "save_SNR_CNR_stack", "type": "function", "doc": "<p></p>\n", "parameters": ["SNRs", "CNRs", "save_dir", "prefix"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_visuals", "modulename": "gaussquality.gaussquality_visuals", "qualname": "", "type": "module", "doc": "<p>Gaussian mixture model fitting for greyscale images: Visualisation</p>\n\n<p>Created on Mon Jan 25 16:41:57 2021</p>\n\n<p>@author: elainehoml</p>\n"}, {"fullname": "gaussquality.gaussquality_visuals.plot_GMM", "modulename": "gaussquality.gaussquality_visuals", "qualname": "plot_GMM", "type": "function", "doc": "<p>Plots histogram of grey values with fitted Gaussians overlaid.\nNumber of histogram bins depends on bit depth of image, e.g.\n8-bit images have 256 bins, 16-bit images have 256**2 bins.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img</strong> (array-like):\n2-D array containing image grey values.</li>\n<li><strong>mu_fitted</strong> (array-like, len=n_components):\nFitted mean of Gaussian components.</li>\n<li><strong>sigma_fitted</strong> (array-like, len=n_components):\nFitted standard deviation of Gaussian components.</li>\n<li><strong>phi_fitted</strong> (array-like, len=n_components):\nFitted weights of Gaussian components.</li>\n<li><strong>plot_title</strong> (str, optional):\nAdds a title to the plot. The default is None.</li>\n<li><strong>threshold</strong> (tuple, optional):\n(Min, Max) grey value to consider. The default is None.</li>\n<li><strong>material_names</strong> (list, optional):\nList containing material names to add to legend. The default is None.</li>\n<li><strong>c_bin</strong> (float, optional, range(0,1)):\nConstant by which to multiply sqrt(number of pixels) to determine bin size\n0.125-0.25 for size 512^3 - 2048^3. Default 0.25.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "parameters": ["img", "mu_fitted", "sigma_fitted", "phi_fitted", "plot_title", "threshold", "material_names", "c_bin"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_visuals.plot_slice_variation", "modulename": "gaussquality.gaussquality_visuals", "qualname": "plot_slice_variation", "type": "function", "doc": "<p>Plot fitted <code>mu</code>, <code>sigma</code> and <code>phi</code> distributions over the stack slices</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fitted_results</strong> (list):\nList containing fitted Gaussian properties <code>mu</code>, <code>sigma</code> and <code>phi</code>\naveraged across the stack.</li>\n<li><strong>iter_results</strong> (list):\nList containing fitted Gaussian properties for each 2-D image\nconsidered.</li>\n<li><strong>material_names</strong> (list, default None.):\nList containing material names, e.g. \"air\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "parameters": ["fitted_results", "iter_results", "material_names"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_visuals.plot_img_and_histo", "modulename": "gaussquality.gaussquality_visuals", "qualname": "plot_img_and_histo", "type": "function", "doc": "<p>Plots imported image and histogram with overlaid fitted Gaussian\ndistributions side-by-side.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>img_filepath</strong> (str, path-like):\nFilepath to image</li>\n<li><strong>mask_percentage</strong> (float):\nPercentage of the image to consider, as a rectangle centred on <code>img</code>.\nRanges from 0-100.</li>\n<li><strong>fitted_results</strong> (list):\nList containing fitted Gaussian properties <code>mu</code>, <code>sigma</code> and <code>phi</code>\naveraged across the stack.</li>\n<li><strong>threshold</strong> (tuple, optional):\n(Min, Max) grey value to consider. The default is None.</li>\n<li><strong>material_names</strong> (list, optional):\nList containing material names to add to legend. The default is None.\nMaterials should be listed in ascending order of mu.</li>\n<li><strong>c_bin</strong> (float, optional, range(0,1)):\nConstant by which to multiply sqrt(number of pixels) to determine bin size\n0.125-0.25 for size 512^3 - 2048^3. Default 0.25</li>\n<li><strong>v_min</strong> (float, optional, default None):\nMinimum grey value to plot</li>\n<li><strong>v_max</strong> (float, optional, default None):\nMaximum grey value to plot</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "parameters": ["img_filepath", "mask_percentage", "fitted_results", "threshold", "material_names", "c_bin", "vmin", "vmax"], "funcdef": "def"}, {"fullname": "gaussquality.gaussquality_visuals.vis_slices", "modulename": "gaussquality.gaussquality_visuals", "qualname": "vis_slices", "type": "function", "doc": "<p>3D Plot of data considered for GMM</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_runs</strong> (int):\nNumber of runs, i.e. number of z-slices considered.</li>\n<li><strong>z_percentage</strong> (float, 0-100):\nPercentage of stack to consider</li>\n<li><strong>mask_xy</strong> (float, 0-100):\nPercentage of x-y image to consider</li>\n<li><strong>img_dir</strong> (str, path-like):\nDirectory where image sequence is</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "parameters": ["n_runs", "z_percentage", "mask_xy", "img_dir"], "funcdef": "def"}]